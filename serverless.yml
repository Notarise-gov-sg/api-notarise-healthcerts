service: api-notarise-healthcerts

provider:
  name: aws
  runtime: nodejs12.x
  memorySize: 256
  timeout: 30 # optional, in seconds, default is 6
  stage: ${opt:stage, "dev"}
  region: ${opt:region, "ap-southeast-1"}
  environment:
    AWS_XRAY_CONTEXT_MISSING: LOG_ERROR
  tracing:
    lambda: true
  permissionsBoundary: "arn:aws:iam::${self:custom.accountId}:policy/GCCIAccountBoundary"
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - kms:Decrypt
      Resource: ${self:custom.KMS_ARN}
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource: "*"
    - Effect: Allow
      Action: ["kms:GenerateDataKey"]
      Resource: "arn:aws:kms:${self:provider.region}:${self:custom.accountId}:key/${env:SNS_KMS_KEY_ID, 'PLACEHOLDER'}"
    - Effect: Allow
      Action: ["sns:Publish"]
      Resource: "arn:aws:sns:${self:provider.region}:${self:custom.accountId}:healthcert"
  deploymentBucket:
    name: notarise-serverless-deployment
  apiKeys:
    - ${opt:stage, "dev"}-notariseHealthcertKey-notarise
    # generate API keys for other healthcert providers
    # https://www.healthcerts.gov.sg/list-of-providers/
    - ${opt:stage, "dev"}-notariseHealthcertKey-1Pass
    - ${opt:stage, "dev"}-notariseHealthcertKey-3DCerts
    - ${opt:stage, "dev"}-notariseHealthcertKey-Accredify
    - ${opt:stage, "dev"}-notariseHealthcertKey-AOKpass
    - ${opt:stage, "dev"}-notariseHealthcertKey-CollinsonAssistance
    - ${opt:stage, "dev"}-notariseHealthcertKey-Jebhealth
    - ${opt:stage, "dev"}-notariseHealthcertKey-KnowledgeCatalyst
    - ${opt:stage, "dev"}-notariseHealthcertKey-Nextid
    - ${opt:stage, "dev"}-notariseHealthcertKey-Riverr
    - ${opt:stage, "dev"}-notariseHealthcertKey-Trybe
  usagePlan:
    quota:
      limit: 10000
      offset: 0
      period: DAY
    throttle:
      burstLimit: 200
      rateLimit: 100
functions:
  notarisePdt:
    environment:
      DEBUG: "*,-follow-redirects"
      INFURA_API_KEY: ${self:custom.${self:custom.envSource}.INFURA_API_KEY}
      SIGNING_DID_NAME: ${self:custom.${self:custom.envSource}.SIGNING_DID_NAME}
      SIGNING_DNS_DID_LOCATION: ${self:custom.${self:custom.envSource}.SIGNING_DNS_DID_LOCATION}
      SIGNING_DID: ${self:custom.${self:custom.envSource}.SIGNING_DID}
      SIGNING_DID_KEY: ${self:custom.${self:custom.envSource}.SIGNING_DID_KEY}
      SIGNING_DID_PRIVATE_KEY: ${self:custom.${self:custom.envSource}.SIGNING_DID_PRIVATE_KEY}
      TRANSIENT_STORAGE_URL: ${self:custom.${self:custom.envSource}.TRANSIENT_STORAGE_URL}
      TRANSIENT_STORAGE_API_KEY: ${self:custom.${self:custom.envSource}.TRANSIENT_STORAGE_API_KEY}
      NOTIFICATION_ENABLED: ${self:custom.${self:custom.envSource}.NOTIFICATION_ENABLED}
      NOTIFICATION_TOPIC_ARN: ${self:custom.${self:custom.envSource}.NOTIFICATION_TOPIC_ARN}
      NOTIFICATION_SENDER_NAME: ${self:custom.${self:custom.envSource}.NOTIFICATION_SENDER_NAME}
      NOTIFICATION_SENDER_LOGO: ${self:custom.${self:custom.envSource}.NOTIFICATION_SENDER_LOGO}
      NOTIFICATION_TEMPLATE_ID: ${self:custom.${self:custom.envSource}.NOTIFICATION_TEMPLATE_ID}
      AUTHORIZED_ISSUERS_MAP: ${self:custom.${self:custom.envSource}.AUTHORIZED_ISSUERS_MAP}
      ETHEREUM_NETWORK: ${self:custom.ethereumConfig.${self:provider.stage}, self:custom.ethereumConfig.stg}
      USE_API_AUTHORISED_ISSUER: ${self:custom.${self:custom.envSource}.USE_API_AUTHORISED_ISSUER}
      AUTHORIZED_ISSUERS_API_URL: ${self:custom.${self:custom.envSource}.AUTHORIZED_ISSUERS_API_URL}
      AUTHORIZED_ISSUERS_API_KEY: ${self:custom.${self:custom.envSource}.AUTHORIZED_ISSUERS_API_KEY}
    handler: src/functionHandlers/notarisePdt/handler.handler
    events:
      - http:
          path: /notarise/pdt
          method: post
          private: true

custom:
  # Stupid hack to get conditionals on the env
  # Please duplicate environment variables in the `ssm` and `dotenv` section
  # default value for ${ssm:xxx, "default"} and ${env:xxx, "default"} does not work
  # ideally you can just nest one inside. But no!
  # ssm failure returns "undefined" while env failure returns ""
  vpcDiscovery:
    vpcName: '${env:VPC_NAME}'
    subnetNames: # optional if securityGroupNames are specified
        - 'notarize-${self:custom.subnetEnvName.${self:provider.stage}, self:custom.subnetEnvName.other}-application-private-*'
    securityGroupNames:
        - 'default'
  subnetEnvName:
    stg: "stg"
    production: "prd"
    other: "placeholder"
  envSourceConfig:
    stg: "ssm"
    production: "ssm"
    other: "dotenv"
  envSource: ${self:custom.envSourceConfig.${self:provider.stage}, self:custom.envSourceConfig.other}
  KMS_ARN: ${env:KMS_ARN, "PLACEHOLDER_ARN"}
  ethereumConfig:
    stg: "ropsten"
    production: "homestead"
  ssm:
    INFURA_API_KEY: ${ssm:/serverless/INFURA_API_KEY~true, ""}
    SIGNING_DID_NAME: ${ssm:/serverless/api-notarise-healthcerts/SIGNING_DID_NAME, ""}
    SIGNING_DNS_DID_LOCATION: ${ssm:/serverless/api-notarise-healthcerts/SIGNING_DNS_DID_LOCATION, ""}
    SIGNING_DID: ${ssm:/serverless/api-notarise-healthcerts/SIGNING_DID~true, ""}
    SIGNING_DID_KEY: ${ssm:/serverless/api-notarise-healthcerts/SIGNING_DID_KEY~true, ""}
    SIGNING_DID_PRIVATE_KEY: ${ssm:/serverless/api-notarise-healthcerts/SIGNING_DID_PRIVATE_KEY~true, ""}
    TRANSIENT_STORAGE_URL: ${ssm:/serverless/api-notarise-healthcerts/TRANSIENT_STORAGE_URL, ""}
    TRANSIENT_STORAGE_API_KEY: ${ssm:/serverless/api-notarise-healthcerts/TRANSIENT_STORAGE_API_KEY~true, ""}
    NOTIFICATION_ENABLED: ${ssm:/serverless/api-notarise-healthcerts/NOTIFICATION_ENABLED, ""}
    NOTIFICATION_TOPIC_ARN: ${ssm:/serverless/api-notarise-healthcerts/NOTIFICATION_TOPIC_ARN, ""}
    NOTIFICATION_SENDER_NAME: ${ssm:/serverless/api-notarise-healthcerts/NOTIFICATION_SENDER_NAME, ""}
    NOTIFICATION_SENDER_LOGO: ${ssm:/serverless/api-notarise-healthcerts/NOTIFICATION_SENDER_LOGO, ""}
    NOTIFICATION_TEMPLATE_ID: ${ssm:/serverless/api-notarise-healthcerts/NOTIFICATION_TEMPLATE_ID, ""}
    AUTHORIZED_ISSUERS_MAP: ${ssm:/serverless/api-notarise-healthcerts/AUTHORIZED_ISSUERS_MAP, "development"}
    USE_API_AUTHORISED_ISSUER: ${ssm:/serverless/api-notarise-healthcerts/USE_API_AUTHORISED_ISSUER, ""}
    AUTHORIZED_ISSUERS_API_URL: ${ssm:/serverless/api-notarise-healthcerts/AUTHORIZED_ISSUERS_API_URL, ""}
    AUTHORIZED_ISSUERS_API_KEY: ${ssm:/serverless/api-notarise-healthcerts/AUTHORIZED_ISSUERS_API_KEY~true, ""}
  dotenv:
    INFURA_API_KEY: ${env:INFURA_API_KEY, ""}
    SIGNING_DID_NAME: ${env:SIGNING_DID_NAME, ""}
    SIGNING_DNS_DID_LOCATION: ${env:SIGNING_DNS_DID_LOCATION, ""}
    SIGNING_DID: ${env:SIGNING_DID, ""}
    SIGNING_DID_KEY: ${env:SIGNING_DID_KEY, ""}
    SIGNING_DID_PRIVATE_KEY: ${env:SIGNING_DID_PRIVATE_KEY, ""}
    TRANSIENT_STORAGE_URL: ${env:TRANSIENT_STORAGE_URL, ""}
    TRANSIENT_STORAGE_API_KEY: ${env:TRANSIENT_STORAGE_API_KEY, ""}
    NOTIFICATION_ENABLED: ${env:NOTIFICATION_ENABLED, ""}
    NOTIFICATION_TOPIC_ARN: ${env:NOTIFICATION_TOPIC_ARN, ""}
    NOTIFICATION_SENDER_NAME: ${env:NOTIFICATION_SENDER_NAME, ""}
    NOTIFICATION_SENDER_LOGO: ${env:NOTIFICATION_SENDER_LOGO, ""}
    NOTIFICATION_TEMPLATE_ID: ${env:NOTIFICATION_TEMPLATE_ID, ""}
    AUTHORIZED_ISSUERS_MAP: ${env:TRANSIENT_STORAGE_API_KEY, ""}
    USE_API_AUTHORISED_ISSUER: ${env:USE_API_AUTHORISED_ISSUER, ""}
    AUTHORIZED_ISSUERS_API_URL: ${env:AUTHORIZED_ISSUERS_API_URL, ""}
    AUTHORIZED_ISSUERS_API_KEY: ${env:AUTHORIZED_ISSUERS_API_KEY, ""}
  # End of hack on env
  accountId: ${file(./src/serverlessConfig.js):getAccountId}
  webpack:
    includeModules: true

plugins:
  - serverless-webpack
  - serverless-dotenv-plugin
  - serverless-s3-local
  - serverless-offline
  - serverless-offline-ses
  - serverless-attach-permission-boundary
  - "@govtechsg/serverless-selective-functions"
  - serverless-vpc-discovery
